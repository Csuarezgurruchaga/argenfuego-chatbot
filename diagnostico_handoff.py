#!/usr/bin/env python3
"""
Script de diagn√≥stico completo para el problema de handoff de WhatsApp
Ejecutar en Railway para diagnosticar el problema
"""

import os
import sys
import requests
import json
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

def verificar_variables_entorno():
    """Verificar que todas las variables de entorno est√©n configuradas"""
    print("üîç VERIFICANDO VARIABLES DE ENTORNO")
    print("=" * 50)
    
    variables_requeridas = [
        "AGENT_WHATSAPP_NUMBER",
        "TWILIO_ACCOUNT_SID", 
        "TWILIO_AUTH_TOKEN",
        "TWILIO_WHATSAPP_NUMBER",
        "AGENT_API_TOKEN"
    ]
    
    todas_configuradas = True
    
    for var in variables_requeridas:
        valor = os.getenv(var)
        if valor:
            # Ocultar tokens sensibles
            if "TOKEN" in var or "SID" in var:
                valor_masked = valor[:8] + "..." + valor[-4:] if len(valor) > 12 else "***"
                print(f"‚úÖ {var}: {valor_masked}")
            else:
                print(f"‚úÖ {var}: {valor}")
        else:
            print(f"‚ùå {var}: NO CONFIGURADO")
            todas_configuradas = False
    
    print()
    return todas_configuradas

def verificar_formato_numero_agente():
    """Verificar que el n√∫mero del agente tenga el formato correcto"""
    print("üì± VERIFICANDO FORMATO DEL N√öMERO DEL AGENTE")
    print("=" * 50)
    
    agent_number = os.getenv("AGENT_WHATSAPP_NUMBER", "")
    
    if not agent_number:
        print("‚ùå AGENT_WHATSAPP_NUMBER no est√° configurado")
        return False
    
    # Verificar formato
    if not agent_number.startswith('+'):
        print(f"‚ö†Ô∏è  N√∫mero sin prefijo '+': {agent_number}")
        print("üí° Deber√≠a ser: +5491135722871")
        return False
    
    if not agent_number[1:].isdigit():
        print(f"‚ö†Ô∏è  N√∫mero contiene caracteres no num√©ricos: {agent_number}")
        return False
    
    print(f"‚úÖ Formato correcto: {agent_number}")
    print()
    return True

def test_twilio_conexion():
    """Probar conexi√≥n con Twilio"""
    print("üåê PROBANDO CONEXI√ìN CON TWILIO")
    print("=" * 50)
    
    try:
        from twilio.rest import Client
        
        account_sid = os.getenv("TWILIO_ACCOUNT_SID")
        auth_token = os.getenv("TWILIO_AUTH_TOKEN")
        
        if not account_sid or not auth_token:
            print("‚ùå Credenciales de Twilio no configuradas")
            return False
        
        client = Client(account_sid, auth_token)
        
        # Intentar obtener informaci√≥n de la cuenta
        account = client.api.accounts(account_sid).fetch()
        print(f"‚úÖ Conexi√≥n exitosa con Twilio")
        print(f"   Account SID: {account.sid}")
        print(f"   Account Status: {account.status}")
        print()
        return True
        
    except Exception as e:
        print(f"‚ùå Error conectando con Twilio: {str(e)}")
        print()
        return False

def test_envio_mensaje_directo():
    """Probar env√≠o directo de mensaje al agente"""
    print("üì§ PROBANDO ENV√çO DIRECTO AL AGENTE")
    print("=" * 50)
    
    try:
        from services.twilio_service import twilio_service
        
        agent_number = os.getenv("AGENT_WHATSAPP_NUMBER", "")
        if not agent_number:
            print("‚ùå AGENT_WHATSAPP_NUMBER no configurado")
            return False
        
        test_message = "üß™ TEST DIRECTO - Si recibes esto, el sistema funciona ‚úÖ"
        
        print(f"Enviando mensaje a: {agent_number}")
        print(f"Mensaje: {test_message}")
        
        success = twilio_service.send_whatsapp_message(agent_number, test_message)
        
        if success:
            print("‚úÖ Mensaje enviado exitosamente")
            print("üí° Revisa tu WhatsApp para confirmar que lleg√≥ el mensaje")
        else:
            print("‚ùå Error enviando mensaje")
        
        print()
        return success
        
    except Exception as e:
        print(f"‚ùå Error en test de env√≠o: {str(e)}")
        print()
        return False

def test_deteccion_handoff():
    """Probar detecci√≥n de handoff"""
    print("üß™ PROBANDO DETECCI√ìN DE HANDOFF")
    print("=" * 50)
    
    try:
        from services.nlu_service import nlu_service
        
        test_messages = [
            "humano",
            "quiero hablar con un agente",
            "necesito un operador",
            "hablar con una persona"
        ]
        
        for msg in test_messages:
            result = nlu_service.detectar_solicitud_humano(msg)
            status = "‚úÖ HANDOFF" if result else "‚ùå NO HANDOFF"
            print(f"{status}: '{msg}'")
        
        print()
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test de detecci√≥n: {str(e)}")
        print()
        return False

def test_handoff_completo():
    """Probar flujo completo de handoff"""
    print("üîÑ PROBANDO FLUJO COMPLETO DE HANDOFF")
    print("=" * 50)
    
    try:
        from chatbot.rules import ChatbotRules
        from chatbot.states import conversation_manager
        from chatbot.models import EstadoConversacion
        from services.whatsapp_handoff_service import whatsapp_handoff_service
        
        # Simular conversaci√≥n
        test_phone = "+5491123456789"
        test_name = "Cliente Test"
        test_message = "quiero hablar con un humano"
        
        print(f"Simulando mensaje: '{test_message}' de {test_name} ({test_phone})")
        
        # Procesar mensaje
        respuesta = ChatbotRules.procesar_mensaje(test_phone, test_message, test_name)
        print(f"Respuesta del bot: {respuesta}")
        
        # Verificar estado
        conversacion = conversation_manager.get_conversacion(test_phone)
        handoff_activated = conversacion.atendido_por_humano or conversacion.estado == EstadoConversacion.ATENDIDO_POR_HUMANO
        
        print(f"Handoff activado: {handoff_activated}")
        print(f"Estado de conversaci√≥n: {conversacion.estado}")
        
        if handoff_activated:
            # Intentar notificar al agente
            if not conversacion.handoff_notified:
                print("Enviando notificaci√≥n al agente...")
                success = whatsapp_handoff_service.notify_agent_new_handoff(
                    test_phone,
                    test_name,
                    conversacion.mensaje_handoff_contexto or test_message,
                    test_message
                )
                
                if success:
                    print("‚úÖ Notificaci√≥n enviada al agente")
                    conversacion.handoff_notified = True
                else:
                    print("‚ùå Error enviando notificaci√≥n al agente")
            else:
                print("‚ÑπÔ∏è  Handoff ya notificado")
        
        print()
        return handoff_activated
        
    except Exception as e:
        print(f"‚ùå Error en test de handoff completo: {str(e)}")
        print()
        return False

def verificar_webhook_twilio():
    """Verificar configuraci√≥n de webhook en Twilio"""
    print("üîó VERIFICANDO CONFIGURACI√ìN DE WEBHOOK")
    print("=" * 50)
    
    try:
        from twilio.rest import Client
        
        account_sid = os.getenv("TWILIO_ACCOUNT_SID")
        auth_token = os.getenv("TWILIO_AUTH_TOKEN")
        whatsapp_number = os.getenv("TWILIO_WHATSAPP_NUMBER", "")
        
        if not all([account_sid, auth_token, whatsapp_number]):
            print("‚ùå Variables de Twilio no configuradas")
            return False
        
        client = Client(account_sid, auth_token)
        
        # Limpiar prefijo whatsapp: si existe
        if whatsapp_number.startswith('whatsapp:'):
            whatsapp_number = whatsapp_number[9:]
        
        # Obtener informaci√≥n del n√∫mero WhatsApp
        incoming_phone_numbers = client.incoming_phone_numbers.list()
        
        whatsapp_configured = False
        for number in incoming_phone_numbers:
            if number.phone_number == whatsapp_number:
                whatsapp_configured = True
                print(f"‚úÖ N√∫mero WhatsApp encontrado: {number.phone_number}")
                print(f"   Webhook URL: {number.sms_url or 'No configurado'}")
                print(f"   Webhook Method: {number.sms_method or 'No configurado'}")
                break
        
        if not whatsapp_configured:
            print(f"‚ö†Ô∏è  N√∫mero WhatsApp {whatsapp_number} no encontrado en la cuenta")
            print("üí° Verifica que el n√∫mero est√© configurado en Twilio Console")
        
        print()
        return whatsapp_configured
        
    except Exception as e:
        print(f"‚ùå Error verificando webhook: {str(e)}")
        print()
        return False

def generar_reporte_diagnostico():
    """Generar reporte completo de diagn√≥stico"""
    print("üìä REPORTE DE DIAGN√ìSTICO COMPLETO")
    print("=" * 60)
    
    resultados = {
        "variables_entorno": verificar_variables_entorno(),
        "formato_numero": verificar_formato_numero_agente(),
        "conexion_twilio": test_twilio_conexion(),
        "deteccion_handoff": test_deteccion_handoff(),
        "webhook_twilio": verificar_webhook_twilio(),
        "envio_directo": test_envio_mensaje_directo(),
        "handoff_completo": test_handoff_completo()
    }
    
    print("üìã RESUMEN DE RESULTADOS")
    print("=" * 30)
    
    for test, resultado in resultados.items():
        status = "‚úÖ PASS" if resultado else "‚ùå FAIL"
        print(f"{status}: {test.replace('_', ' ').title()}")
    
    print()
    
    # Recomendaciones
    print("üí° RECOMENDACIONES")
    print("=" * 20)
    
    if not resultados["variables_entorno"]:
        print("‚Ä¢ Configura todas las variables de entorno en Railway")
    
    if not resultados["formato_numero"]:
        print("‚Ä¢ Verifica que AGENT_WHATSAPP_NUMBER tenga formato +5491135722871")
    
    if not resultados["conexion_twilio"]:
        print("‚Ä¢ Verifica credenciales de Twilio en Railway")
    
    if not resultados["webhook_twilio"]:
        print("‚Ä¢ Configura webhook en Twilio Console apuntando a tu dominio Railway")
    
    if not resultados["envio_directo"]:
        print("‚Ä¢ El problema est√° en el env√≠o de mensajes - revisa logs de Twilio")
    
    if not resultados["handoff_completo"]:
        print("‚Ä¢ El problema est√° en el flujo de handoff - revisa logs de la aplicaci√≥n")
    
    print()
    print("üöÄ PR√ìXIMOS PASOS")
    print("=" * 20)
    print("1. Ejecuta este script en Railway con todas las variables configuradas")
    print("2. Revisa los logs de Railway para errores espec√≠ficos")
    print("3. Verifica en Twilio Console que el webhook est√© configurado")
    print("4. Prueba enviando un mensaje real al bot")

if __name__ == "__main__":
    print("üîß DIAGN√ìSTICO COMPLETO - HANDOFF WHATSAPP")
    print("=" * 60)
    print()
    
    generar_reporte_diagnostico()
    
    print("üèÅ DIAGN√ìSTICO COMPLETADO")
    print("=" * 60)
