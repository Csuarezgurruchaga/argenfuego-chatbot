#!/usr/bin/env python3

import os
import sys
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# Agregar el directorio actual al path para importaciones
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from chatbot.rules import ChatbotRules
from chatbot.states import conversation_manager

def test_caso_completo(numero_telefono: str, mensajes: list, descripcion: str):
    print(f"\n{'='*70}")
    print(f"üß™ PRUEBA LLM-FIRST: {descripcion}")
    print(f"{'='*70}")
    
    # Resetear conversaci√≥n antes de cada prueba
    conversation_manager.reset_conversacion(numero_telefono)
    
    for i, mensaje in enumerate(mensajes):
        print(f"\nüì± Usuario ({i+1}): {mensaje}")
        respuesta = ChatbotRules.procesar_mensaje(numero_telefono, mensaje)
        print(f"ü§ñ Bot: {respuesta}")
        
        # Mostrar estado actual
        conv = conversation_manager.get_conversacion(numero_telefono)
        print(f"üìä Estado: {conv.estado}")
        if conv.datos_temporales:
            datos_relevantes = {k: v for k, v in conv.datos_temporales.items() if not k.startswith('_')}
            if datos_relevantes:
                print(f"üìã Datos: {datos_relevantes}")

def test_parsing_llm():
    print("üöÄ INICIANDO PRUEBAS LLM-FIRST + VALIDACI√ìN GEOGR√ÅFICA")
    
    # Caso 1: Tu ejemplo espec√≠fico - m√∫ltiples campos en una l√≠nea
    test_caso_completo("test1", [
        "hola",
        "necesito cotizar matafuegos", 
        "Del valle centenera 3222 piso 4D, pueden pasar de 15-17h"
    ], "Extracci√≥n m√∫ltiple campos - direccion + horario en una l√≠nea")
    
    # Caso 2: Direccion sin especificar CABA/Provincia - debe preguntar
    test_caso_completo("test2", [
        "hola",
        "1",
        "juan@empresa.com, Palermo cerca del shopping, ma√±anas, necesito extintores ABC",
        "1"  # Selecciona CABA
    ], "Validaci√≥n geogr√°fica - Palermo sin especificar ‚Üí pregunta CABA/Provincia")
    
    # Caso 3: Direccion clara CABA - no debe preguntar
    test_caso_completo("test3", [
        "hola",
        "quiero matafuego urgente",
        "pedro@tech.com, Av. Corrientes 1234 CABA, cualquier tarde, oficina 50m2"
    ], "LLM-first + ubicaci√≥n clara CABA - no pregunta ubicaci√≥n")
    
    # Caso 4: Direccion clara Provincia - no debe preguntar  
    test_caso_completo("test4", [
        "hola",
        "2", 
        "maria@startup.com, La Plata centro, lunes a mi√©rcoles 10-15h, consultor√≠a completa"
    ], "Ubicaci√≥n clara Provincia (La Plata) - no pregunta ubicaci√≥n")
    
    # Caso 5: Direcci√≥n ambigua ‚Üí pregunta ubicaci√≥n ‚Üí selecciona Provincia
    test_caso_completo("test5", [
        "hola",
        "se rompi√≥ el extintor urgente",
        "carlos@empresa.com, Ramos Mej√≠a altura 2500, horario flexible, v√°lvula rota",
        "2"  # Selecciona Provincia
    ], "NLU + ubicaci√≥n ambigua ‚Üí √°rbol de decisi√≥n Provincia")

def test_solo_parsing():
    print(f"\n{'='*50}")
    print("üîç TEST SOLO PARSING LLM vs BASICO")
    print(f"{'='*50}")
    
    mensaje_test = "Del valle centenera 3222 piso 4D, pueden pasar de 15-17h"
    
    # Test LLM
    print(f"\nüìù Mensaje: {mensaje_test}")
    try:
        datos_llm = ChatbotRules._extraer_datos_con_llm(mensaje_test)
        print(f"ü§ñ LLM result: {datos_llm}")
    except Exception as e:
        print(f"‚ùå LLM error: {e}")
    
    # Test b√°sico
    try:
        datos_basico = ChatbotRules._parsear_datos_contacto_basico(mensaje_test)
        print(f"‚öôÔ∏è  Basic result: {datos_basico}")
    except Exception as e:
        print(f"‚ùå Basic error: {e}")

if __name__ == "__main__":
    # Verificar si OpenAI est√° configurado
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ö†Ô∏è  OPENAI_API_KEY no configurado - solo se ejecutar√°n tests b√°sicos")
        test_solo_parsing()
    else:
        print("‚úÖ OpenAI configurado - ejecutando tests completos")
        test_parsing_llm()
        test_solo_parsing()